{% comment %}
  Renders cart drawer

  Usage:
  {% render 'cart-drawer' %}
{% endcomment %}

{{ 'quantity-popover.css' | asset_url | stylesheet_tag }}
{{ 'component-card.css' | asset_url | stylesheet_tag }}
{{ 'custom-cart-drawer.css' | asset_url | stylesheet_tag }}

<script src="{{ 'cart.js' | asset_url }}" defer="defer"></script>
<script src="{{ 'quantity-popover.js' | asset_url }}" defer="defer"></script>

<style>
  .drawer {
    visibility: hidden;
  }
</style>

<cart-drawer class="drawer{% if cart == empty %} is-empty{% endif %}">
  <div id="CartDrawer" class="cart-drawer">
    <div id="CartDrawer-Overlay" class="cart-drawer__overlay"></div>
    <div
      class="drawer__inner gradient color-{{ settings.cart_color_scheme }}"
      role="dialog"
      aria-modal="true"
      aria-label="{{ 'sections.cart.title' | t }}"
      tabindex="-1"
    >
      <!-- Top Checkout CTA inside cart drawer -->
      <div class="cart-top-cta">
        <a
          href="{{ routes.cart_url }}"
          class="button button--primary cart__checkout-button{% if cart == empty %} is-disabled{% endif %}"
          name="checkout"
          {% if cart == empty %}
            aria-disabled="true" tabindex="-1"
          {% endif %}
        >
          {{- 'sections.cart.checkout' | t -}}
        </a>
        {% if cart == empty %}
          <div class="cart-top-empty-note">YOUR CART IS EMPTY</div>
        {% endif %}
      </div>
      {%- if cart == empty -%}
        <!-- Empty cart state handled by top message -->
      {%- endif -%}
      <div class="drawer__header">
        <h2 class="drawer__heading">{{ 'sections.cart.title' | t }}</h2>
      </div>
      <cart-drawer-items
        {% if cart == empty %}
          class=" is-empty"
        {% endif %}
      >
        <form
          action="{{ routes.cart_url }}"
          id="CartDrawer-Form"
          class="cart__contents cart-drawer__form"
          method="post"
        >
          <div id="CartDrawer-CartItems" class="drawer__contents js-contents">
            {%- if cart != empty -%}
              <div class="drawer__cart-items-wrapper">
                <div class="cart-header">
                  <div class="cart-header-left">PRODUCT</div>
                  <div class="cart-header-center">PRODUCT NAME</div>
                  <div class="cart-header-right">000 USD</div>
                </div>

                {%- for item in cart.items -%}
                  <div class="cart-item-row" id="CartDrawer-Item-{{ item.index | plus: 1 }}">
                    <!-- Desktop layout -->
                    <div class="cart-item-left">
                      <div class="cart-item-product">PRODUCT</div>
                    </div>

                    <div class="cart-item-center">
                      <div class="cart-item-name">{{ item.product.title | escape }}</div>

                      <div class="cart-item-details">
                        <div class="cart-item-option">
                          <span class="option-name">SIZE</span>
                          <span class="option-value">{{ item.variant.title | upcase }}</span>
                        </div>
                        <div class="cart-item-option">
                          <span class="option-name">COLOR</span>
                          <span class="option-value">
                            {{- item.product.metafields.custom.color | default: 'N/A' | upcase -}}
                          </span>
                        </div>

                        <div class="cart-item-quantity">
                          <span class="quantity-label">QUANTITY</span>
                          <span class="quantity-value">{{ item.quantity | sprintf: '%02d' }}</span>
                          <div class="quantity-controls">
                            <button
                              class="quantity-add"
                              type="button"
                              data-index="{{ item.index | plus: 1 }}"
                              data-quantity="{{ item.quantity }}"
                              onclick="handleQuantityChange(this, 1)"
                            >
                              ADD
                            </button>
                            <button
                              class="quantity-remove"
                              type="button"
                              data-index="{{ item.index | plus: 1 }}"
                              data-quantity="{{ item.quantity }}"
                              onclick="handleQuantityChange(this, -1)"
                            >
                              REMOVE
                            </button>
                          </div>
                        </div>
                      </div>
                    </div>

                    <div class="cart-item-right">
                      <div class="cart-item-price">{{ item.final_price | money | remove: '.00' }} USD</div>
                    </div>

                    <!-- Mobile layout -->
                    <div class="cart-item-mobile">
                      <div class="mobile-first-row">
                        <div class="mobile-product-label">PRODUCT</div>
                        <div class="mobile-product-name">{{ item.product.title | escape | upcase }}</div>
                        <div></div>
                        <div class="mobile-product-price">{{ item.final_price | money | remove: '.00' }} USD</div>
                      </div>

                      <div class="mobile-details-section">
                        <div class="mobile-labels-column">
                          <div class="mobile-detail-label">SIZE</div>
                          <div class="mobile-detail-label">COLOR</div>
                          <div class="mobile-detail-label">QUANTITY</div>
                        </div>

                        <div class="mobile-values-column">
                          <div class="mobile-detail-value">{{ item.variant.title | upcase }}</div>
                          <div class="mobile-detail-value">
                            {{ item.product.metafields.custom.color | default: 'N/A' | upcase }}
                          </div>
                          <div class="mobile-detail-value">{{ item.quantity | sprintf: '%02d' }}</div>
                        </div>

                        <div class="mobile-controls-column">
                          <div></div>
                          <!-- Empty space for SIZE row -->
                          <div></div>
                          <!-- Empty space for COLOR row -->
                          <div class="mobile-quantity-controls">
                            <button
                              class="quantity-add"
                              type="button"
                              data-index="{{ item.index | plus: 1 }}"
                              data-quantity="{{ item.quantity }}"
                              onclick="handleQuantityChange(this, 1)"
                            >
                              ADD
                            </button>
                            <button
                              class="quantity-remove"
                              type="button"
                              data-index="{{ item.index | plus: 1 }}"
                              data-quantity="{{ item.quantity }}"
                              onclick="handleQuantityChange(this, -1)"
                            >
                              REMOVE
                            </button>
                          </div>
                        </div>

                        <div class="mobile-price-column">
                          <div></div>
                          <div></div>
                          <div></div>
                        </div>
                      </div>
                    </div>

                    <!-- Hidden quantity input for cart updates -->
                    <input
                      type="hidden"
                      name="updates[]"
                      value="{{ item.quantity }}"
                      data-index="{{ item.index | plus: 1 }}"
                    >
                  </div>
                {%- endfor -%}

                <div class="cart-total-section">
                  <div class="cart-total-line">
                    <span class="total-label">TOTAL</span>
                    <span class="total-amount">{{ cart.total_price | money | remove: '.00' }} USD</span>
                  </div>
                </div>
              </div>
            {%- endif -%}
            <p id="CartDrawer-LiveRegionText" class="visually-hidden" role="status"></p>
            <p id="CartDrawer-LineItemStatus" class="visually-hidden" aria-hidden="true" role="status">
              {{ 'accessibility.loading' | t }}
            </p>
          </div>
          <div id="CartDrawer-CartErrors" role="alert"></div>
        </form>
      </cart-drawer-items>
    </div>
  </div>
</cart-drawer>

<script>
  let isUpdating = false;

  async function handleQuantityChange(button, change) {
    if (isUpdating) return;

    const index = parseInt(button.dataset.index);
    const currentQty = parseInt(button.dataset.quantity);
    const newQty = currentQty + change;

    // Update the data-quantity attribute immediately
    const buttons = document.querySelectorAll(`button[data-index="${index}"]`);
    buttons.forEach((btn) => (btn.dataset.quantity = newQty));

    await updateQuantity(index, newQty);
  }

  async function updateQuantity(lineIndex, newQuantity) {
    if (isUpdating) return;
    isUpdating = true;
    if (newQuantity < 0) newQuantity = 0;

    const form = document.getElementById('CartDrawer-Form');
    const input = form.querySelector(`input[data-index="${lineIndex}"]`);
    const itemRow = document.getElementById(`CartDrawer-Item-${lineIndex}`);

    if (input) {
      // Get current cart state first
      const currentCart = await fetch('/cart.js').then((res) => res.json());
      const currentItem = currentCart.items[lineIndex - 1];

      if (!currentItem) return;

      // Calculate the actual new quantity based on current state
      const actualNewQuantity = newQuantity;

      input.value = actualNewQuantity;

      fetch('/cart/change.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          id: currentItem.key,
          quantity: actualNewQuantity,
        }),
      })
        .then((response) => response.json())
        .then((cart) => {
          // Update all quantity displays
          const mobileQuantity = itemRow.querySelector('.mobile-detail-value:last-of-type');
          const desktopQuantity = itemRow.querySelector('.quantity-value');

          if (mobileQuantity) mobileQuantity.textContent = String(newQuantity).padStart(2, '0');
          if (desktopQuantity) desktopQuantity.textContent = String(newQuantity).padStart(2, '0');

          // Update the hidden input
          input.value = newQuantity;

          // Update the item's price
          const cartItem = cart.items[lineIndex - 1];
          if (cartItem) {
            const priceDisplays = itemRow.querySelectorAll('.mobile-product-price, .cart-item-price');
            const formattedPrice = (cartItem.final_line_price / 100).toFixed(0) + ' USD';
            priceDisplays.forEach((display) => {
              display.textContent = formattedPrice;
            });
          }

          // Update cart total
          const totalAmount = document.querySelector('.total-amount');
          if (totalAmount) {
            totalAmount.textContent = (cart.total_price / 100).toFixed(0) + ' USD';
          }

          // Update cart count in header
          const cartIconBubble = document.getElementById('cart-icon-bubble');
          if (cartIconBubble) {
            cartIconBubble.textContent = cart.item_count > 0 ? `CART(${cart.item_count})` : 'CART';
          }

          // Remove the item row if quantity is 0
          if (newQuantity === 0) {
            itemRow.remove();
            // If cart is empty, reload to show empty state
            if (cart.item_count === 0) {
              location.reload();
            }
          }
        })
        .catch((error) => {
          console.error('Error updating cart:', error);
        })
        .finally(() => {
          isUpdating = false;
        });
    }
  }
</script>
