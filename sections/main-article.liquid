{{ 'section-blog-post.css' | asset_url | stylesheet_tag }}

<style>
  /* Remove global header padding on article pages */
  body {
    padding-top: 0 !important;
  }
  .article-split {
    display: block;
  }
  .article-split__inner {
    display: flex;
    flex-direction: column;
  }
  .article-split__image,
  .article-split__text {
    width: 100%;
  }
  .article-split__image img {
    width: 100%;
    height: auto;
    display: block;
    object-fit: cover;
    aspect-ratio: 2 / 3; /* portrait on mobile */
  }
  .article-split__content {
    padding-top: 60px; /* increase mobile top spacing */
    padding-left: 0;
    padding-right: 0;
    display: flex;
    flex-direction: column;
  }
  /* Force mobile top spacing â€“ guard against theme overrides */
  @media screen and (max-width: 989px) {
    .article-split__content {
      padding-top: 60px !important;
    }
    .article-title,
    .article-body {
      padding-top: 60px !important;
    }
  }
  /* Mobile extra top spacing for title and body */
  .article-title,
  .article-body {
    padding-top: 60px;
  }
  /* Remove any unexpected left offsets coming from theme defaults */
  .article-body *,
  .article-body p,
  .article-body div,
  .article-body span {
    margin-left: 0 !important;
    padding-left: 0 !important;
    text-indent: 0 !important;
  }
  /* Apply mobile padding after the reset */
  .article-title,
  .article-date,
  .article-body {
    padding-left: 16px !important;
    padding-right: 16px !important;
  }

  @media screen and (min-width: 990px) {
    .article-split__inner {
      flex-direction: row-reverse; /* text left, image right */
      align-items: flex-start;
      margin-left: 0 !important;
      padding-left: 0 !important;
    }
    .article-split__image {
      position: sticky;
      top: 0;
      height: 100vh;
      flex: 1;
      overflow: hidden;
    }
    .article-split__image img {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
    .article-split__text {
      flex: 1;
      min-height: 200vh; /* Increased to allow for scroll */
      overflow: visible; /* Changed from hidden to visible */
      position: relative;
      margin-left: 0 !important;
      padding-left: 0 !important;
    }
    .article-split__content {
      min-height: 150vh; /* provide enough height for proper spacing */
      display: flex;
      flex-direction: column;
      padding-left: 0 !important;
      padding-right: 0;
      margin-left: 0 !important;
    }
    /* Date scrolls with content and has 180px top spacing */
    .article-date {
      padding-top: 180px; /* 180px top spacing as requested */
      padding-bottom: 20px;
    }
    /* Title also scrolls with content */
    .article-title {
      padding-top: 30px;
      padding-bottom: 20px;
    }
    /* Wrap for title+body to sit at column bottom on desktop */
    .article-content-block {
      margin-top: auto;
      padding-bottom: 50px; /* breathing room at bottom */
    }
    /* Article body - remove flex expansion and duplicate padding */
    .article-body {
      display: block; /* changed from flex to block */
      overflow-y: visible; /* Changed from auto to visible */
      margin-top: 150px; /* separation between title and body */
    }
    /* First reset all margins and paddings completely */
    .article-body,
    .article-body *,
    .rte,
    .rte *,
    .article-split__content,
    .article-split__content *,
    .article-split__text,
    .article-split__text * {
      margin-left: 0 !important;
      margin-right: 0 !important;
      text-indent: 0 !important;
      padding-left: 0 !important;
      padding-right: 0 !important;
      border-left: none !important;
      box-sizing: border-box !important;
    }
    /* Ensure the main containers have no hidden margins */
    .article-split,
    .article-split__inner,
    .article-split__text,
    .article-split__content {
      margin: 0 !important;
      padding-left: 0 !important;
      padding-right: 0 !important;
    }
    /* Override specific RTE global styles */
    .article-body .rte ul,
    .article-body .rte ol,
    .article-body ul,
    .article-body ol,
    .rte ul,
    .rte ol {
      padding-left: 0 !important;
      margin-left: 0 !important;
    }
    .article-body .rte table td,
    .article-body table td,
    .rte table td {
      padding-left: 0 !important;
      padding-right: 0 !important;
    }
    /* Then apply the padding we want - this needs to come after the reset */
    .article-title,
    .article-date,
    .article-body {
      padding-left: 30px !important;
      margin-left: 0 !important;
    }
    /* Ensure list style position is inside since we removed padding */
    .article-body ul,
    .article-body ol,
    .rte ul,
    .rte ol {
      list-style-position: inside;
    }
    /* Override all potential text elements with margins/padding */
    .article-body blockquote,
    .rte blockquote,
    .article-body p,
    .rte p,
    .article-body div,
    .rte div,
    .article-body h1,
    .article-body h2,
    .article-body h3,
    .article-body h4,
    .article-body h5,
    .article-body h6 {
      margin-left: 0 !important;
      padding-left: 0 !important;
    }
    /* Specific blockquote override since global CSS adds padding */
    .article-split blockquote,
    .article-split__content blockquote,
    .article-split__text blockquote {
      padding-left: 0 !important;
      margin-left: 0 !important;
      border-left: none !important;
    }
    /* Remove mobile extra top spacing on desktop; use container top padding instead */
    .article-title,
    .article-body {
      padding-top: 0;
    }
    .article-body {
      margin-top: 40px; /* ensure separation persists */
      margin-left: 0 !important;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const articleBody = document.querySelector('.article-body');
    const articleSplit = document.querySelector('.article-split');
    const articleText = document.querySelector('.article-split__text');

    if (articleBody && window.innerWidth >= 990) {
      // Remove independent scroll behavior - let the whole page scroll naturally
      // The text column will now scroll with the page instead of independently

      // Optional: Add smooth scrolling behavior for better UX
      document.documentElement.style.scrollBehavior = 'smooth';

      // Track when we've scrolled past the text content
      function checkScrollPosition() {
        const rect = articleBody.getBoundingClientRect();
        const textBottom = rect.bottom;
        const viewportHeight = window.innerHeight;

        // When text reaches the top of the viewport, both columns scroll together
        return textBottom <= viewportHeight;
      }

      // Listen for scroll events to update behavior
      window.addEventListener('scroll', function () {
        checkScrollPosition();
      });
    }
  });
</script>

<article class="article-split">
  <div class="article-split__inner">
    <div class="article-split__image">
      {% if article.image %}
        <img
          srcset="
            {% if article.image.width >= 750 %}{{ article.image | image_url: width: 750 }} 750w,{% endif %}
            {% if article.image.width >= 1100 %}{{ article.image | image_url: width: 1100 }} 1100w,{% endif %}
            {% if article.image.width >= 1500 %}{{ article.image | image_url: width: 1500 }} 1500w,{% endif %}
            {{ article.image | image_url }} {{ article.image.width }}w
          "
          sizes="(min-width: 1200px) 50vw, 100vw"
          src="{{ article.image | image_url: width: 1100 }}"
          alt="{{ article.image.alt | escape }}"
          loading="eager"
          fetchpriority="high"
          width="{{ article.image.width }}"
          height="{{ article.image.height }}"
        >
      {% endif %}
    </div>
    <div class="article-split__text">
      <div class="article-split__content">
        <div class="article-date" style="opacity:.6; margin-bottom: 12px;">
          {{ article.published_at | time_tag: format: 'date' }}
        </div>
        <div class="article-content-block">
          <h1 class="article-title" style="margin: 0 0 12px 0; font-weight: normal;">{{ article.title | escape }}</h1>
          <div class="rte article-body">
            {{ article.content }}
          </div>
        </div>
      </div>
    </div>
  </div>
</article>

<script type="application/ld+json">
  {{ article | structured_data }}
</script>

{% schema %}
{
  "name": "Article (split)",
  "tag": "section",
  "class": "section",
  "settings": []
}
{% endschema %}
